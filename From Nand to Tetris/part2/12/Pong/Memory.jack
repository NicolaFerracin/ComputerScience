// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array freeList, ram;

    /** Initializes the class. */
    function void init() {
      let freeList = 2048;
      let freeList[0] = 0;
      let freeList[1] = 14335;
      let ram = 0;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int block, prev;

      let block = 0;

      // find next available block for given size
      while ((freeList[block + 1] < (size + 1))) {
        let block = freeList[block];

        // if we reach the end, it means there is no space
        if (freeList[block] = 0) {
          do Sys.error(6);
        }
      }

      // move block to the bottom of the available space
      let prev = block;
      let block = block + freeList[block + 1] - size;
      let freeList[block] = freeList[prev];
      let freeList[block + 1] = -size; // mark it negative as taken

      let freeList[prev] = block;
      let freeList[prev + 1] = Math.abs(freeList[prev + 1]) - size - 2;

      return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      let freeList[o - 1] = -(freeList[o - 1]);

      return;
    }
}
