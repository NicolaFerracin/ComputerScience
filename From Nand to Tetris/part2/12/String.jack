// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

  field Array str;
  field int length, MAX_LEN;

  /** constructs a new empty string with a maximum length of maxLength
    *  and initial length of 0. */
  constructor String new(int maxLength) {
    if (maxLength > 0) {
      let str = Array.new(maxLength);
    }
    let MAX_LEN = maxLength;
    let length = 0;
    return this;
  }

  /** Disposes this string. */
  method void dispose() {
    if (length > 0) {
      do str.dispose();
    }
    do Memory.deAlloc(this);
    return;
  }

  /** Returns the current length of this string. */
  method int length() {
    return length;
  }

  /** Returns the character at the j-th location of this string. */
  method char charAt(int j) {
    if (j < length) {
      return str[j];
    }
    return String.newLine();
  }

  /** Sets the character at the j-th location of this string to c. */
  method void setCharAt(int j, char c) {
    if (j < MAX_LEN) {
      let str[j] = c;
    }
    return;
  }

  /** Appends c to this string's end and returns this string. */
  method String appendChar(char c) {
    if (length < MAX_LEN) {
      do setCharAt(length, c);
      let length = length + 1;
    }
    return this;
  }

  /** Erases the last character from this string. */
  method void eraseLastChar() {
    if (length > 0) {
      let length = length - 1;
      do setCharAt(length, 0);
    }
    return;
  }

  /** Returns the integer value of this string, 
    *  until a non-digit character is detected. */
  method int intValue() {
    var int i, val;
    var boolean isNeg;

    let isNeg = false;
    let i = 0;
    if (charAt(i) = 45) { // "-"
      let isNeg = true;
      let i = i + 1;
    }

    while (i < length) {
      let val = (val * 10) + (charAt(i) - 48); // 0-1-2-3 are encoded as 48-49-50-5ยง
      let i = i + 1;
    }

    if (isNeg) {
      let val = -val;
    }

    return val;
  }

  /** Sets this string to hold a representation of the given value. */
  method void setInt(int val) {
    var int num;
    let num = val;
    let length = 0;
    if (num < 0) {
      let num = -num;
      do appendChar(45); // "-"
    }

    do int2string(num);
    return;
  }
  
  /** Helper function to create a string from an integer */
  method void int2string(int val) {
    var int lastDigit, c;

    let lastDigit = val - (10 * (val / 10)); // mod(val, 10)
    let c = lastDigit + 48; // 0-1-2-3 are encoded as 48-49-50-5ยง
    if (val < 10) {
      do appendChar(c);
      return;
    }
    do int2string(val / 10);
    do appendChar(c);
    return;
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }
}
