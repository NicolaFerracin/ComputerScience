// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int BITS;
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      var int i, curr;
      let BITS = 16;
      let twoToThe = Array.new(BITS);
      let curr = 1;
      let i = 0;

      while (i < BITS) {
        let twoToThe[i] = curr;
        let curr = curr + curr;
        let i = i + 1;
      }

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, i;
      let sum = 0;
      let shiftedX = x;

      let i = 0;
      while (i < BITS) {
        if (Math.bit(y, i)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }

      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int a, b, q;
      
      let a = Math.abs(x);
      let b = Math.abs(y);

      if ((b > a) | (b < 0)) {
        return 0;
      }

      let q = Math.divide(a, 2 * b);

      if ((a - (2 * q * b)) < b) {
        let q = 2 * q;
      } else {
        let q = 2 * q + 1;
      }
      if ((x < 0) | (y < 0)) {
        return -q;
      }
      return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, acc, sqr;
      let y = 0;
      let j = BITS / 2 - 1;

      while (~(j < 0)) {
        let acc = y + twoToThe[j];
        let sqr = acc * acc;
        if (((sqr < x) | (sqr = x)) & sqr > 0) {
          let y = acc;
        }
        let j = j - 1;
      }

      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      } 
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }

    /** Returns true if the i-th bit of x is not 0, false otherwise */
    function boolean bit(int x, int i) {
      return ~(x & twoToThe[i] = 0);
    }
}
